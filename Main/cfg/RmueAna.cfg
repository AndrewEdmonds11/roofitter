// Define all possible observables
string mom.leaf = "deent.mom";
//double mom.hist.min = -5;
//double mom.hist.max = 5;
double mom.hist.min = 95;
//double mom.hist.max = 100;
//double mom.hist.max = 106;
double mom.hist.max = 115;
//double mom.hist.max = 125;
double mom.hist.bin_width = 0.25;

string t0.leaf = "de.t0";
double t0.hist.min = 400;
double t0.hist.max = 1800;
double t0.hist.bin_width = 100;

// Define all possible cuts
string cut.goodfit = "de.status>0";
string cut.triggered = "(trigbits&0x208)>0";
string cut.inTimeWindow = "de.t0>700 && de.t0<1695";
string cut.inTanDipCut = "deent.td>0.577350 && deent.td<1.000";
string cut.inD0Cut = "deent.d0>-80 && deent.d0<105";
string cut.inMaxRCut = "deent.d0+2./deent.om>450 && deent.d0+2./deent.om<680";
string cut.noCRVHit = "(bestcrv<0||(de.t0-crvinfo._timeWindowStart[bestcrv]<-50||de.t0-crvinfo._timeWindowStart[bestcrv]>150.0))";
string cut.passTrkQual = "dequal.TrkQual>0.8";
string cut.recomom = "deent.mom>95";

// Define all the models
string cemLO.mom.pdf = "Gaussian::cemLO(mom, eMax[104.97], sigma[0.01])";
string cemLL.mom.pdf = "RooCeMPdf::cemLL(mom, eMax[104.97], me[0.511], alpha[1.0/137.035999139])";
string dioPol58.mom.pdf = "RooPol58::dioPol58(mom, c5[8.6434e-17], c6[1.16874e-17], c7[-1.87828e-19], c8[9.16327e-20])";

// Res w/ TrkQual > 0.8 (w/eloss)
bool mom.res.on = true;
string mom.res.type = "pdf";
string mom.res.pdf = "RooDSCB::res(mom, dscb_mean[-5.96993e-01], dscb_sigma[2.75586e-01],dscb_ANeg[4.10541e-01], dscb_PNeg[3.11497e+01], dscb_APos[2.20973e+00], dscb_PPos[5.60749e+00])";
// Res w/o TrkQual (w/eloss)
//string mom.res.pdf = "RooDSCB::res(mom, dscb_mean[-6.13940e-01], dscb_sigma[3.04265e-01],dscb_ANeg[4.26257e-01], dscb_PNeg[2.59409e+01], dscb_APos[1.86683e+00], dscb_PPos[2.40294e+00])";
//string mom.res.pdf = "FCONV::res(mom, RooDSCB::intrinsic(mom, dscb_mean[-3.38567e-02], dscb_sigma[1.51529e-01],dscb_ANeg[9.81574e-01], dscb_PNeg[3.09312e+00], dscb_APos[1.15061e+00], dscb_PPos[3.18211e+00]), RooCBShape::ELoss(mom, eloss_mean[-5.09246e-01], eloss_sigma[1.55414e-01], eloss_alpha[1], eloss_n[1]))";
// Landau::ELoss(mom, landau_mean[5.09246e-01], landau_sigma[1.55414e-01]))";
//string mom.res.pdf = "Gaussian::res(mom, dscb_mean[-6.13940e-01], dscb_sigma[3.04265e-01])";

//string mom.res.type = "hist";
//string mom.res.hist.file = "trkqual0-0.root";
//string mom.res.hist.name = "hMomentumRes";

// Efficiency Curve
bool mom.eff.on = false;
string mom.eff.type = "func";
vector<string> mom.eff.func.params = {"thresh", "slope", "maxEff"};
double mom.eff.func.thresh = 90.2;
double mom.eff.func.slope = 0.0787;
double mom.eff.func.maxEff = 0.201;
string mom.eff.func = "(TMath::Erf((mom-thresh)*slope)+1)*0.5*maxEff";


// Define the analyses
vector<string> analyses = {"ana"};//, "bnb"};

bool ana.fillHist = true;
bool ana.fit = true;
bool bnb.fillHist = true;
bool bnb.fit = false;

//string ana.model = "SUM::model(NCe[0, 200]*cemLLres, NDio[100,10000]*dioPol58res)";
string ana.model = "SUM::model(NCe[0, 200]*cemLL, NDio[100,10000]*dioPol58)";

vector<string> ana.calculations = { "f_cap[0.609]",
				    "f_dio_above_95[3.9e-11]",
				    "EXPR::NDioTotal('NDio / f_dio_above_95', NDio, f_dio_above_95)",
				    "EXPR::NCap('(f_cap/(1-f_cap))*NDioTotal', f_cap, NDioTotal)",
				    "EXPR::Rmue('NCe / NCap', NCe, NCap)",
				    "Poisson::poisCe(NCe, muCe[0, 200])"};

vector<string> ana.observables = {"mom"};
vector<string> bnb.observables = {"t0", "mom"}; // x, y axis defined in order
// {"mom", "t0"};

vector<string> ana.cuts = {"goodfit", "triggered", "inTimeWindow", "inTanDipCut", "inD0Cut", "inMaxRCut", "noCRVHit", "passTrkQual", "recomom"};
//vector<string> ana.cuts = {"goodfit", "triggered", "inTimeWindow", "inTanDipCut", "inD0Cut", "inMaxRCut", "noCRVHit", "recomom"};
//vector<string> ana.cuts = {"goodfit", "triggered", "inTimeWindow", "noCRVHit", "recomom"};


vector<string> ana.components = {"cemLL", "dioPol58"};
vector<string> bnb.components = {"cemLO"};
  //{"cemLL", "dio"};

//
// This tells emacs to view this file in c++ mode.
// Local Variables:
// mode:c++
// End:
